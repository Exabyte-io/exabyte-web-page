input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type Employee {
  id: ID!
  firstName: String
  lastName: String
  photo: UploadFile
}

type ContactFormRequest {
  id: ID!
  email: String!
  firstName: String
  lastName: String
  message: String
  rating: Float
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type ContactFormRequestConnection {
  values: [ContactFormRequest]
  groupBy: ContactFormRequestGroupBy
  aggregate: ContactFormRequestAggregator
}

type ContactFormRequestAggregator {
  count: Int
  totalCount: Int
  sum: ContactFormRequestAggregatorSum
  avg: ContactFormRequestAggregatorAvg
  min: ContactFormRequestAggregatorMin
  max: ContactFormRequestAggregatorMax
}

type ContactFormRequestAggregatorSum {
  rating: Float
}

type ContactFormRequestAggregatorAvg {
  rating: Float
}

type ContactFormRequestAggregatorMin {
  rating: Float
}

type ContactFormRequestAggregatorMax {
  rating: Float
}

type ContactFormRequestGroupBy {
  id: [ContactFormRequestConnectionId]
  email: [ContactFormRequestConnectionEmail]
  firstName: [ContactFormRequestConnectionFirstName]
  lastName: [ContactFormRequestConnectionLastName]
  message: [ContactFormRequestConnectionMessage]
  rating: [ContactFormRequestConnectionRating]
}

type ContactFormRequestConnectionId {
  key: ID
  connection: ContactFormRequestConnection
}

type ContactFormRequestConnectionEmail {
  key: String
  connection: ContactFormRequestConnection
}

type ContactFormRequestConnectionFirstName {
  key: String
  connection: ContactFormRequestConnection
}

type ContactFormRequestConnectionLastName {
  key: String
  connection: ContactFormRequestConnection
}

type ContactFormRequestConnectionMessage {
  key: String
  connection: ContactFormRequestConnection
}

type ContactFormRequestConnectionRating {
  key: Float
  connection: ContactFormRequestConnection
}

input ContactFormRequestInput {
  email: String!
  firstName: String
  lastName: String
  message: String
  files: [ID]
  rating: Float
  created_by: ID
  updated_by: ID
}

input editContactFormRequestInput {
  email: String
  firstName: String
  lastName: String
  message: String
  files: [ID]
  rating: Float
  created_by: ID
  updated_by: ID
}

input createContactFormRequestInput {
  data: ContactFormRequestInput
}

type createContactFormRequestPayload {
  contactFormRequest: ContactFormRequest
}

input updateContactFormRequestInput {
  where: InputID
  data: editContactFormRequestInput
}

type updateContactFormRequestPayload {
  contactFormRequest: ContactFormRequest
}

input deleteContactFormRequestInput {
  where: InputID
}

type deleteContactFormRequestPayload {
  contactFormRequest: ContactFormRequest
}

type Content {
  id: ID!
  title: String!
  description: String
  sections: [ComponentOrganismsSection]
  table: [ComponentMoleculesMap]
  button: ComponentAtomsButton
  slug: String!
  subtitle: String
  section: ComponentOrganismsSection
}

type ContentConnection {
  values: [Content]
  groupBy: ContentGroupBy
  aggregate: ContentAggregator
}

type ContentAggregator {
  count: Int
  totalCount: Int
}

type ContentGroupBy {
  id: [ContentConnectionId]
  title: [ContentConnectionTitle]
  description: [ContentConnectionDescription]
  button: [ContentConnectionButton]
  slug: [ContentConnectionSlug]
  subtitle: [ContentConnectionSubtitle]
}

type ContentConnectionId {
  key: ID
  connection: ContentConnection
}

type ContentConnectionTitle {
  key: String
  connection: ContentConnection
}

type ContentConnectionDescription {
  key: String
  connection: ContentConnection
}

type ContentConnectionButton {
  key: ID
  connection: ContentConnection
}

type ContentConnectionSlug {
  key: String
  connection: ContentConnection
}

type ContentConnectionSubtitle {
  key: String
  connection: ContentConnection
}

input ContentInput {
  title: String
  description: String
  sections: [ComponentOrganismsSectionInput]
  table: [ComponentMoleculesMapInput]
  button: ComponentAtomsButtonInput
  slug: String!
  subtitle: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editContentInput {
  title: String
  description: String
  sections: [editComponentOrganismsSectionInput]
  table: [editComponentMoleculesMapInput]
  button: editComponentAtomsButtonInput
  slug: String
  subtitle: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createContentInput {
  data: ContentInput
}

type createContentPayload {
  content: Content
}

input updateContentInput {
  where: InputID
  data: editContentInput
}

type updateContentPayload {
  content: Content
}

input deleteContentInput {
  where: InputID
}

type deleteContentPayload {
  content: Content
}

type Website {
  id: ID!
  navigation: [ComponentMoleculesMenu]
  domain: String!
  meta: [ComponentMoleculesMap]
  redirects: [ComponentMoleculesMap]
  googleAnalyticsCode: String
}

type WebsiteConnection {
  values: [Website]
  groupBy: WebsiteGroupBy
  aggregate: WebsiteAggregator
}

type WebsiteAggregator {
  count: Int
  totalCount: Int
}

type WebsiteGroupBy {
  id: [WebsiteConnectionId]
  domain: [WebsiteConnectionDomain]
  googleAnalyticsCode: [WebsiteConnectionGoogleAnalyticsCode]
}

type WebsiteConnectionId {
  key: ID
  connection: WebsiteConnection
}

type WebsiteConnectionDomain {
  key: String
  connection: WebsiteConnection
}

type WebsiteConnectionGoogleAnalyticsCode {
  key: String
  connection: WebsiteConnection
}

input WebsiteInput {
  navigation: [ComponentMoleculesMenuInput]
  domain: String!
  meta: [ComponentMoleculesMapInput!]
  redirects: [ComponentMoleculesMapInput]
  googleAnalyticsCode: String
  created_by: ID
  updated_by: ID
}

input editWebsiteInput {
  navigation: [editComponentMoleculesMenuInput]
  domain: String
  meta: [editComponentMoleculesMapInput]
  redirects: [editComponentMoleculesMapInput]
  googleAnalyticsCode: String
  created_by: ID
  updated_by: ID
}

input createWebsiteInput {
  data: WebsiteInput
}

type createWebsitePayload {
  website: Website
}

input updateWebsiteInput {
  where: InputID
  data: editWebsiteInput
}

type updateWebsitePayload {
  website: Website
}

input deleteWebsiteInput {
  where: InputID
}

type deleteWebsitePayload {
  website: Website
}

type EmailDesignerEmailTemplate {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  sourceCodeToTemplateId: Int
  design: JSON
  name: String
  subject: String
  bodyHtml: String
  bodyText: String
  enabled: Boolean
  tags: JSON
}

input EmailTemplateInput {
  sourceCodeToTemplateId: Int
  design: JSON
  name: String
  subject: String
  bodyHtml: String
  bodyText: String
  enabled: Boolean
  tags: JSON
  created_by: ID
  updated_by: ID
}

input editEmailTemplateInput {
  sourceCodeToTemplateId: Int
  design: JSON
  name: String
  subject: String
  bodyHtml: String
  bodyText: String
  enabled: Boolean
  tags: JSON
  created_by: ID
  updated_by: ID
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  username: String!
  email: String!
  role: UsersPermissionsRole
  firstName: String
  lastName: String
  photo: UploadFile
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  role: [UsersPermissionsUserConnectionRole]
  firstName: [UsersPermissionsUserConnectionFirstName]
  lastName: [UsersPermissionsUserConnectionLastName]
  photo: [UsersPermissionsUserConnectionPhoto]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionFirstName {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionLastName {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionPhoto {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  password: String
  email: String!
  provider: String
  blocked: Boolean
  role: ID
  firstName: String
  lastName: String
  photo: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  password: String
  email: String
  provider: String
  blocked: Boolean
  role: ID
  firstName: String
  lastName: String
  photo: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type BlogCategory {
  id: ID!
  name: String!
  slug: String!
  posts(sort: String, limit: Int, start: Int, where: JSON): [BlogPost]
  parent(sort: String, limit: Int, start: Int, where: JSON): [BlogCategory]
  children(sort: String, limit: Int, start: Int, where: JSON): [BlogCategory]
}

type BlogCategoryConnection {
  values: [BlogCategory]
  groupBy: BlogCategoryGroupBy
  aggregate: BlogCategoryAggregator
}

type BlogCategoryAggregator {
  count: Int
  totalCount: Int
}

type BlogCategoryGroupBy {
  id: [BlogCategoryConnectionId]
  name: [BlogCategoryConnectionName]
  slug: [BlogCategoryConnectionSlug]
}

type BlogCategoryConnectionId {
  key: ID
  connection: BlogCategoryConnection
}

type BlogCategoryConnectionName {
  key: String
  connection: BlogCategoryConnection
}

type BlogCategoryConnectionSlug {
  key: String
  connection: BlogCategoryConnection
}

input CategoryInput {
  name: String!
  posts: [ID]
  parent: [ID]
  children: [ID]
  slug: String!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editCategoryInput {
  name: String
  posts: [ID]
  parent: [ID]
  children: [ID]
  slug: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

type BlogPost {
  id: ID!
  name: String!
  text: String!
  slug: String!
  subtitle: String
  section: [ComponentOrganismsSection]
  cover(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  categories(sort: String, limit: Int, start: Int, where: JSON): [BlogCategory]
}

type BlogPostConnection {
  values: [BlogPost]
  groupBy: BlogPostGroupBy
  aggregate: BlogPostAggregator
}

type BlogPostAggregator {
  count: Int
  totalCount: Int
}

type BlogPostGroupBy {
  id: [BlogPostConnectionId]
  name: [BlogPostConnectionName]
  text: [BlogPostConnectionText]
  slug: [BlogPostConnectionSlug]
  subtitle: [BlogPostConnectionSubtitle]
}

type BlogPostConnectionId {
  key: ID
  connection: BlogPostConnection
}

type BlogPostConnectionName {
  key: String
  connection: BlogPostConnection
}

type BlogPostConnectionText {
  key: String
  connection: BlogPostConnection
}

type BlogPostConnectionSlug {
  key: String
  connection: BlogPostConnection
}

type BlogPostConnectionSubtitle {
  key: String
  connection: BlogPostConnection
}

input PostInput {
  name: String!
  text: String!
  cover: [ID]
  slug: String!
  categories: [ID]
  subtitle: String
  section: [ComponentOrganismsSectionInput]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editPostInput {
  name: String
  text: String
  cover: [ID]
  slug: String
  categories: [ID]
  subtitle: String
  section: [editComponentOrganismsSectionInput]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

type IntlCountry {
  id: ID!
  name: String!
  code: String!
}

type IntlCountryConnection {
  values: [IntlCountry]
  groupBy: IntlCountryGroupBy
  aggregate: IntlCountryAggregator
}

type IntlCountryAggregator {
  count: Int
  totalCount: Int
}

type IntlCountryGroupBy {
  id: [IntlCountryConnectionId]
  name: [IntlCountryConnectionName]
  code: [IntlCountryConnectionCode]
}

type IntlCountryConnectionId {
  key: ID
  connection: IntlCountryConnection
}

type IntlCountryConnectionName {
  key: String
  connection: IntlCountryConnection
}

type IntlCountryConnectionCode {
  key: String
  connection: IntlCountryConnection
}

input CountryInput {
  name: String!
  code: String!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editCountryInput {
  name: String
  code: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

type IntlCurrency {
  id: ID!
  name: String!
  code: String!
}

type IntlCurrencyConnection {
  values: [IntlCurrency]
  groupBy: IntlCurrencyGroupBy
  aggregate: IntlCurrencyAggregator
}

type IntlCurrencyAggregator {
  count: Int
  totalCount: Int
}

type IntlCurrencyGroupBy {
  id: [IntlCurrencyConnectionId]
  name: [IntlCurrencyConnectionName]
  code: [IntlCurrencyConnectionCode]
}

type IntlCurrencyConnectionId {
  key: ID
  connection: IntlCurrencyConnection
}

type IntlCurrencyConnectionName {
  key: String
  connection: IntlCurrencyConnection
}

type IntlCurrencyConnectionCode {
  key: String
  connection: IntlCurrencyConnection
}

input CurrencyInput {
  name: String!
  code: String!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editCurrencyInput {
  name: String
  code: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

type ComponentAtomsButton {
  id: ID!
  link: ComponentAtomsLink
  simpleIcon: String
}

input ComponentAtomsButtonInput {
  link: ComponentAtomsLinkInput!
  simpleIcon: String
}

input editComponentAtomsButtonInput {
  id: ID
  link: editComponentAtomsLinkInput
  simpleIcon: String
}

"""Key-Value entry"""
type ComponentAtomsEntry {
  id: ID!
  key: String!
  value: String
}

input ComponentAtomsEntryInput {
  key: String!
  value: String
}

input editComponentAtomsEntryInput {
  id: ID
  key: String
  value: String
}

type ComponentAtomsLink {
  id: ID!
  extra: String
  url: String!
  text: String!
}

input ComponentAtomsLinkInput {
  extra: String
  url: String!
  text: String!
}

input editComponentAtomsLinkInput {
  id: ID
  extra: String
  url: String
  text: String
}

type ComponentAtomsNumeric {
  id: ID!
  value: Float!
  unit: String
}

input ComponentAtomsNumericInput {
  value: Float!
  unit: String
}

input editComponentAtomsNumericInput {
  id: ID
  value: Float
  unit: String
}

type ComponentAtomsParagraph {
  id: ID!
  lines: [ComponentAtomsText]
}

input ComponentAtomsParagraphInput {
  lines: [ComponentAtomsTextInput]
}

input editComponentAtomsParagraphInput {
  id: ID
  lines: [editComponentAtomsTextInput]
}

"""Text node"""
type ComponentAtomsText {
  id: ID!
  value: String!
}

input ComponentAtomsTextInput {
  value: String!
}

input editComponentAtomsTextInput {
  id: ID
  value: String
}

"""Collection<Entry>"""
type ComponentMoleculesMap {
  id: ID!
  entries: [ComponentAtomsEntry]
  slug: String!
}

input ComponentMoleculesMapInput {
  entries: [ComponentAtomsEntryInput]
  slug: String!
}

input editComponentMoleculesMapInput {
  id: ID
  entries: [editComponentAtomsEntryInput]
  slug: String
}

type ComponentMoleculesMenu {
  id: ID!
  links: [ComponentAtomsLink]
  slug: String!
}

input ComponentMoleculesMenuInput {
  links: [ComponentAtomsLinkInput]
  slug: String
}

input editComponentMoleculesMenuInput {
  id: ID
  links: [editComponentAtomsLinkInput]
  slug: String
}

"""
Content building block - defines section, slides, rows and columns and link or button
"""
type ComponentOrganismsArticle {
  id: ID!
  section: ComponentOrganismsSection
  cards: [ComponentOrganismsSection]
  entries: [ComponentAtomsEntry]
  link: ComponentAtomsLink
  slug: String!
}

input ComponentOrganismsArticleInput {
  section: ComponentOrganismsSectionInput!
  cards: [ComponentOrganismsSectionInput!]
  entries: [ComponentAtomsEntryInput]
  link: ComponentAtomsLinkInput
  slug: String!
}

input editComponentOrganismsArticleInput {
  id: ID
  section: editComponentOrganismsSectionInput
  cards: [editComponentOrganismsSectionInput]
  entries: [editComponentAtomsEntryInput]
  link: editComponentAtomsLinkInput
  slug: String
}

type ComponentOrganismsPage {
  id: ID!
  meta: [ComponentAtomsEntry]
  uri: String!
}

input ComponentOrganismsPageInput {
  meta: [ComponentAtomsEntryInput]
  uri: String!
}

input editComponentOrganismsPageInput {
  id: ID
  meta: [editComponentAtomsEntryInput]
  uri: String
}

type ComponentOrganismsSection {
  id: ID!
  title: String
  subTitle: String
  description: String
  extra: String
  text: String
  media: UploadFile
  active: Boolean
  backgroundColor: String
  slug: String
}

input ComponentOrganismsSectionInput {
  title: String
  subTitle: String
  description: String
  extra: String
  text: String
  media: ID
  active: Boolean
  backgroundColor: String
  slug: String
}

input editComponentOrganismsSectionInput {
  id: ID
  title: String
  subTitle: String
  description: String
  extra: String
  text: String
  media: ID
  active: Boolean
  backgroundColor: String
  slug: String
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Employee | ContactFormRequest | ContactFormRequestConnection | ContactFormRequestAggregator | ContactFormRequestAggregatorSum | ContactFormRequestAggregatorAvg | ContactFormRequestAggregatorMin | ContactFormRequestAggregatorMax | ContactFormRequestGroupBy | ContactFormRequestConnectionId | ContactFormRequestConnectionEmail | ContactFormRequestConnectionFirstName | ContactFormRequestConnectionLastName | ContactFormRequestConnectionMessage | ContactFormRequestConnectionRating | createContactFormRequestPayload | updateContactFormRequestPayload | deleteContactFormRequestPayload | Content | ContentConnection | ContentAggregator | ContentGroupBy | ContentConnectionId | ContentConnectionTitle | ContentConnectionDescription | ContentConnectionButton | ContentConnectionSlug | ContentConnectionSubtitle | createContentPayload | updateContentPayload | deleteContentPayload | Website | WebsiteConnection | WebsiteAggregator | WebsiteGroupBy | WebsiteConnectionId | WebsiteConnectionDomain | WebsiteConnectionGoogleAnalyticsCode | createWebsitePayload | updateWebsitePayload | deleteWebsitePayload | EmailDesignerEmailTemplate | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionFirstName | UsersPermissionsUserConnectionLastName | UsersPermissionsUserConnectionPhoto | createUserPayload | updateUserPayload | deleteUserPayload | BlogCategory | BlogCategoryConnection | BlogCategoryAggregator | BlogCategoryGroupBy | BlogCategoryConnectionId | BlogCategoryConnectionName | BlogCategoryConnectionSlug | BlogPost | BlogPostConnection | BlogPostAggregator | BlogPostGroupBy | BlogPostConnectionId | BlogPostConnectionName | BlogPostConnectionText | BlogPostConnectionSlug | BlogPostConnectionSubtitle | IntlCountry | IntlCountryConnection | IntlCountryAggregator | IntlCountryGroupBy | IntlCountryConnectionId | IntlCountryConnectionName | IntlCountryConnectionCode | IntlCurrency | IntlCurrencyConnection | IntlCurrencyAggregator | IntlCurrencyGroupBy | IntlCurrencyConnectionId | IntlCurrencyConnectionName | IntlCurrencyConnectionCode | ComponentAtomsButton | ComponentAtomsEntry | ComponentAtomsLink | ComponentAtomsNumeric | ComponentAtomsParagraph | ComponentAtomsText | ComponentMoleculesMap | ComponentMoleculesMenu | ComponentOrganismsArticle | ComponentOrganismsPage | ComponentOrganismsSection

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  contactFormRequest(id: ID!, publicationState: PublicationState): ContactFormRequest
  contactFormRequests(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [ContactFormRequest]
  contactFormRequestsConnection(sort: String, limit: Int, start: Int, where: JSON): ContactFormRequestConnection
  content(id: ID!, publicationState: PublicationState): Content
  contents(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Content]
  contentsConnection(sort: String, limit: Int, start: Int, where: JSON): ContentConnection
  website(id: ID!, publicationState: PublicationState): Website
  websites(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Website]
  websitesConnection(sort: String, limit: Int, start: Int, where: JSON): WebsiteConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  category(id: ID!, publicationState: PublicationState): BlogCategory
  categories(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [BlogCategory]
  categoriesConnection(sort: String, limit: Int, start: Int, where: JSON): BlogCategoryConnection
  post(id: ID!, publicationState: PublicationState): BlogPost
  posts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [BlogPost]
  postsConnection(sort: String, limit: Int, start: Int, where: JSON): BlogPostConnection
  country(id: ID!, publicationState: PublicationState): IntlCountry
  countries(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [IntlCountry]
  countriesConnection(sort: String, limit: Int, start: Int, where: JSON): IntlCountryConnection
  currency(id: ID!, publicationState: PublicationState): IntlCurrency
  currencies(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [IntlCurrency]
  currenciesConnection(sort: String, limit: Int, start: Int, where: JSON): IntlCurrencyConnection
  me: UsersPermissionsMe
  postBySlug(slug: String!): BlogPost
  categoryBySlug(slug: String!): BlogCategory
  employees: [Employee]!
}

type Mutation {
  createContactFormRequest(input: createContactFormRequestInput): createContactFormRequestPayload
  updateContactFormRequest(input: updateContactFormRequestInput): updateContactFormRequestPayload
  deleteContactFormRequest(input: deleteContactFormRequestInput): deleteContactFormRequestPayload
  createContent(input: createContentInput): createContentPayload
  updateContent(input: updateContentInput): updateContentPayload
  deleteContent(input: deleteContentInput): deleteContentPayload
  createWebsite(input: createWebsiteInput): createWebsitePayload
  updateWebsite(input: updateWebsiteInput): updateWebsitePayload
  deleteWebsite(input: deleteWebsiteInput): deleteWebsitePayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
